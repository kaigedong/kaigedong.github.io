(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{110:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return r})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return d}));var o=t(2),i=t(6),a=(t(0),t(133)),s={id:"doc4",title:"\u521d\u59cb\u5316\u8bbe\u7f6eLinux\u7cfb\u7edf",sidebar_label:"\u521d\u59cb\u5316\u8bbe\u7f6eLinux\u7cfb\u7edf"},r={id:"doc4",isDocsHomePage:!1,title:"\u521d\u59cb\u5316\u8bbe\u7f6eLinux\u7cfb\u7edf",description:"\u5907\u4efdLinux\u7cfb\u7edf",source:"@site/docs/doc4.md",permalink:"/docs/doc4",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/doc4.md",sidebar_label:"\u521d\u59cb\u5316\u8bbe\u7f6eLinux\u7cfb\u7edf",sidebar:"someSidebar",previous:{title:"This is Document Number 3",permalink:"/docs/doc3"},next:{title:"Powered by MDX",permalink:"/docs/mdx"}},l=[{value:"\u5907\u4efdLinux\u7cfb\u7edf",id:"\u5907\u4efdlinux\u7cfb\u7edf",children:[]},{value:"\u5b89\u88c5\u5e38\u7528\u8f6f\u4ef6",id:"\u5b89\u88c5\u5e38\u7528\u8f6f\u4ef6",children:[]},{value:"\u8bbe\u7f6e\u5907\u4efd\u6587\u4ef6\u5939",id:"\u8bbe\u7f6e\u5907\u4efd\u6587\u4ef6\u5939",children:[]}],c={rightToc:l};function d(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"\u5907\u4efdlinux\u7cfb\u7edf"},"\u5907\u4efdLinux\u7cfb\u7edf"),Object(a.b)("div",{className:"admonition admonition-important alert alert--info"},Object(a.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-heading"}),Object(a.b)("h5",{parentName:"div"},Object(a.b)("span",Object(o.a)({parentName:"h5"},{className:"admonition-icon"}),Object(a.b)("svg",Object(o.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(a.b)("path",Object(o.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"important")),Object(a.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-content"}),Object(a.b)("p",{parentName:"div"},"\u62f7\u8d1d.ssh\u6587\u4ef6\u5939\uff01"))),Object(a.b)("h2",{id:"\u5b89\u88c5\u5e38\u7528\u8f6f\u4ef6"},"\u5b89\u88c5\u5e38\u7528\u8f6f\u4ef6"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{}),'sudo pacman -S emacs typora lsd neofetch v2ray chromium emacs tmux lsd dbeaver kdenlive gimp elisa obs-studio mariadb alacritty nutstore tealdeer anki\n\nyay -S notion-app\n# \u5982\u679c\u63d0\u793ahardcode-fixer\u7684\u9519\u8bef\uff0c\u53ef\u4ee5\u5378\u8f7d\u5b83sudo pacman -R hardcode-fixer\n\n# zsh https://ohmyz.sh/\nsh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"\n\n# pyenv https://github.com/pyenv/pyenv\ngit clone https://github.com/pyenv/pyenv.git ~/.pyenv\n\n# FiraMono font\nhttps://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/FiraMono.zip\n# \u5b89\u88c5\u4e86\u4e0b\u9762\u7684\uff1a\n/home/bobo/.fonts/f/Fira_Mono_Medium_Nerd_Font_Complete.otf: FiraMono Nerd Font:style=Medium,Regular\n/home/bobo/.fonts/f/Fira_Mono_Bold_Nerd_Font_Complete.otf: FiraMono Nerd Font:style=Bold\n/home/bobo/.fonts/f/Fira_Mono_Regular_Nerd_Font_Complete.otf: FiraMono Nerd Font:style=Regular\n')),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"emacs"))),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{}),"# https://github.com/hlissner/doom-emacs#install\ngit clone --depth 1 <https://github.com/hlissner/doom-emacs> ~/.emacs.d\n~/.emacs.d/bin/doom install\n\n")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"alacritty.yaml"))),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{}),'# \u4e3b\u8981\u7684\u5730\u65b9\u5728\u4e8e\uff1a\n# Font configuration\nfont:\n  normal:\n    family: "FiraMono Nerd Font"\n    style: Regular\n  bold:\n    family: "FiraMono Nerd Font"\n    style: Bold\n  size: 9.0\n# Colors (Dracula) https://draculatheme.com/\nselection:\n  save_to_clipboard: true\nkey_bindings:\n  - { key: V,        mods: Control, action: Paste            }\n')),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{}),"# Configuration for Alacritty, the GPU enhanced terminal emulator.\n\n# Any items in the `env` entry below will be added as\n# environment variables. Some entries may override variables\n# set by alacritty itself.\n#env:\n  # TERM variable\n  #\n  # This value is used to set the `$TERM` environment variable for\n  # each instance of Alacritty. If it is not present, alacritty will\n  # check the local terminfo database and use `alacritty` if it is\n  # available, otherwise `xterm-256color` is used.\n  #TERM: alacritty\n\n#window:\n  # Window dimensions (changes require restart)\n  #\n  # Specified in number of columns/lines, not pixels.\n  # If both are `0`, this setting is ignored.\n  #dimensions:\n  #  columns: 0\n  #  lines: 0\n\n  # Window position (changes require restart)\n  #\n  # Specified in number of pixels.\n  # If the position is not set, the window manager will handle the placement.\n  #position:\n  #  x: 0\n  #  y: 0\n\n  # Window padding (changes require restart)\n  #\n  # Blank space added around the window in pixels. This padding is scaled\n  # by DPI and the specified value is always added at both opposing sides.\n  #padding:\n  #  x: 0\n  #  y: 0\n\n  # Spread additional padding evenly around the terminal content.\n  #dynamic_padding: false\n\n  # Window decorations\n  #\n  # Values for `decorations`:\n  #     - full: Borders and title bar\n  #     - none: Neither borders nor title bar\n  #\n  # Values for `decorations` (macOS only):\n  #     - transparent: Title bar, transparent background and title bar buttons\n  #     - buttonless: Title bar, transparent background, but no title bar buttons\n  #decorations: full\n\n  # Startup Mode (changes require restart)\n  #\n  # Values for `startup_mode`:\n  #   - Windowed\n  #   - Maximized\n  #   - Fullscreen\n  #\n  # Values for `startup_mode` (macOS only):\n  #   - SimpleFullscreen\n  #startup_mode: Windowed\n\n  # Window title\n  #title: Alacritty\n\n  # Window class (Linux/BSD only):\n  #class:\n    # Application instance name\n    #instance: Alacritty\n    # General application class\n    #general: Alacritty\n\n  # GTK theme variant (Linux/BSD only)\n  #\n  # Override the variant of the GTK theme. Commonly supported values are `dark` and `light`.\n  # Set this to `None` to use the default theme variant.\n  #gtk_theme_variant: None\n\n#scrolling:\n  # Maximum number of lines in the scrollback buffer.\n  # Specifying '0' will disable scrolling.\n  #history: 10000\n\n  # Number of lines the viewport will move for every line scrolled when\n  # scrollback is enabled (history > 0).\n  #multiplier: 3\n\n# Font configuration\nfont:\n  # Normal (roman) font face\n  normal:\n    # Font family\n    #\n    # Default:\n    #   - (macOS) Menlo\n    #   - (Linux/BSD) monospace\n    #   - (Windows) Consolas\n    # family: monospace\n    family: \"FiraMono Nerd Font\"\n\n    # The `style` can be specified to pick a specific face.\n    style: Regular\n  \n\n  # Bold font face\n  bold:\n    # Font family\n    #\n    # If the bold family is not specified, it will fall back to the\n    # value specified for the normal font.\n    family: \"FiraMono Nerd Font\"\n\n    # The `style` can be specified to pick a specific face.\n    style: Bold\n\n  # Italic font face\n  #italic:\n    # Font family\n    #\n    # If the italic family is not specified, it will fall back to the\n    # value specified for the normal font.\n    #family: monospace\n\n    # The `style` can be specified to pick a specific face.\n    #style: Italic\n\n  # Bold italic font face\n  #bold_italic:\n    # Font family\n    #\n    # If the bold italic family is not specified, it will fall back to the\n    # value specified for the normal font.\n    #family: monospace\n\n    # The `style` can be specified to pick a specific face.\n    #style: Bold Italic\n\n  # Point size\n  size: 9.0\n\n  # Offset is the extra space around each character. `offset.y` can be thought of\n  # as modifying the line spacing, and `offset.x` as modifying the letter spacing.\n  #offset:\n  #  x: 0\n  #  y: 0\n\n  # Glyph offset determines the locations of the glyphs within their cells with\n  # the default being at the bottom. Increasing `x` moves the glyph to the right,\n  # increasing `y` moves the glyph upwards.\n  #glyph_offset:\n  #  x: 0\n  #  y: 0\n\n  # Thin stroke font rendering (macOS only)\n  #\n  # Thin strokes are suitable for retina displays, but for non-retina screens\n  # it is recommended to set `use_thin_strokes` to `false`\n  #\n  # macOS >= 10.14.x:\n  #\n  # If the font quality on non-retina display looks bad then set\n  # `use_thin_strokes` to `true` and enable font smoothing by running the\n  # following command:\n  #   `defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO`\n  #\n  # This is a global setting and will require a log out or restart to take\n  # effect.\n  #use_thin_strokes: true\n\n# If `true`, bold text is drawn using the bright color variants.\n#draw_bold_text_with_bright_colors: false\n\n# ...\n\n# Colors (Dracula)\ncolors:\n  # Default colors\n  primary:\n    background: '0x282a36'\n    foreground: '0xf8f8f2'\n\n    # Bright and dim foreground colors\n    #\n    # The dimmed foreground color is calculated automatically if it is not present.\n    # If the bright foreground color is not set, or `draw_bold_text_with_bright_colors`\n    # is `false`, the normal foreground color will be used.\n    #dim_foreground: '0x9a9a9a'\n    #bright_foreground: '0xffffff'\n\n  # Cursor colors\n  #\n  # Colors which should be used to draw the terminal cursor. If these are unset,\n  # the cursor color will be the inverse of the cell color.\n  cursor:\n    text: '0x44475a'\n    cursor: '0xf8f8f2'\n\n  # Normal colors\n  normal:\n    black:   '0x000000'\n    red:     '0xff5555'\n    green:   '0x50fa7b'\n    yellow:  '0xf1fa8c'\n    blue:    '0xbd93f9'\n    magenta: '0xff79c6'\n    cyan:    '0x8be9fd'\n    white:   '0xbfbfbf'\n\n  # Bright colors\n  bright:\n    black:   '0x4d4d4d'\n    red:     '0xff6e67'\n    green:   '0x5af78e'\n    yellow:  '0xf4f99d'\n    blue:    '0xcaa9fa'\n    magenta: '0xff92d0'\n    cyan:    '0x9aedfe'\n    white:   '0xe6e6e6'\n\n  # Dim colors\n  #\n  # If the dim colors are not set, they will be calculated automatically based\n  # on the `normal` colors.\n  dim:\n    black:   '0x14151b'\n    red:     '0xff2222'\n    green:   '0x1ef956'\n    yellow:  '0xebf85b'\n    blue:    '0x4d5b86'\n    magenta: '0xff46b0'\n    cyan:    '0x59dffc'\n    white:   '0xe6e6d1'\n\n  # Indexed Colors\n  #\n  # The indexed colors include all colors from 16 to 256.\n  # When these are not set, they're filled with sensible defaults.\n  #\n  # Example:\n  #   `- { index: 16, color: '0xff00ff' }`\n  #\n  indexed_colors: []\n\n# Colors (Tomorrow Night Bright)\n#colors:\n  # Default colors\n  #primary:\n  #  background: '#000000'\n  #  foreground: '#eaeaea'\n\n    # Bright and dim foreground colors\n    #\n    # The dimmed foreground color is calculated automatically if it is not present.\n    # If the bright foreground color is not set, or `draw_bold_text_with_bright_colors`\n    # is `false`, the normal foreground color will be used.\n    #dim_foreground: '#9a9a9a'\n    #bright_foreground: '#ffffff'\n\n  # Cursor colors\n  #\n  # Colors which should be used to draw the terminal cursor. If these are unset,\n  # the cursor color will be the inverse of the cell color.\n  #cursor:\n  #  text: '#000000'\n  #  cursor: '#ffffff'\n\n  # Selection colors\n  #\n  # Colors which should be used to draw the selection area. If selection\n  # background is unset, selection color will be the inverse of the cell colors.\n  # If only text is unset the cell text color will remain the same.\n  #selection:\n  #  text: '#eaeaea'\n  #  background: '#404040'\n\n  # Normal colors\n  #normal:\n  #  black:   '#000000'\n  #  red:     '#d54e53'\n  #  green:   '#b9ca4a'\n  #  yellow:  '#e6c547'\n  #  blue:    '#7aa6da'\n  #  magenta: '#c397d8'\n  #  cyan:    '#70c0ba'\n  #  white:   '#eaeaea'\n\n  # Bright colors\n  #bright:\n  #  black:   '#666666'\n  #  red:     '#ff3334'\n  #  green:   '#9ec400'\n  #  yellow:  '#e7c547'\n  #  blue:    '#7aa6da'\n  #  magenta: '#b77ee0'\n  #  cyan:    '#54ced6'\n  #  white:   '#ffffff'\n\n  # Dim colors\n  #\n  # If the dim colors are not set, they will be calculated automatically based\n  # on the `normal` colors.\n  #dim:\n  #  black:   '#000000'\n  #  red:     '#8c3336'\n  #  green:   '#7a8530'\n  #  yellow:  '#97822e'\n  #  blue:    '#506d8f'\n  #  magenta: '#80638e'\n  #  cyan:    '#497e7a'\n  #  white:   '#9a9a9a'\n\n  # Indexed Colors\n  #\n  # The indexed colors include all colors from 16 to 256.\n  # When these are not set, they're filled with sensible defaults.\n  #\n  # Example:\n  #   `- { index: 16, color: '#ff00ff' }`\n  #\n  #indexed_colors: []\n\n# Visual Bell\n#\n# Any time the BEL code is received, Alacritty \"rings\" the visual bell. Once\n# rung, the terminal background will be set to white and transition back to the\n# default background color. You can control the rate of this transition by\n# setting the `duration` property (represented in milliseconds). You can also\n# configure the transition function by setting the `animation` property.\n#\n# Values for `animation`:\n#   - Ease\n#   - EaseOut\n#   - EaseOutSine\n#   - EaseOutQuad\n#   - EaseOutCubic\n#   - EaseOutQuart\n#   - EaseOutQuint\n#   - EaseOutExpo\n#   - EaseOutCirc\n#   - Linear\n#\n# Specifying a `duration` of `0` will disable the visual bell.\n#visual_bell:\n#  animation: EaseOutExpo\n#  duration: 0\n#  color: '#ffffff'\n\n# Background opacity\n#\n# Window opacity as a floating point number from `0.0` to `1.0`.\n# The value `0.0` is completely transparent and `1.0` is opaque.\n#background_opacity: 1.0\n\nselection:\n  #semantic_escape_chars: \",\u2502`|:\\\"' ()[]{}<>\\t\"\n\n  # When set to `true`, selected text will be copied to the primary clipboard.\n  save_to_clipboard: true\n\n# Allow terminal applications to change Alacritty's window title.\n#dynamic_title: true\n\n#cursor:\n  # Cursor style\n  #\n  # Values for `style`:\n  #   - \u2587 Block\n  #   - _ Underline\n  #   - | Beam\n  #style: Block\n\n  # If this is `true`, the cursor will be rendered as a hollow box when the\n  # window is not focused.\n  #unfocused_hollow: true\n\n# Live config reload (changes require restart)\n#live_config_reload: true\n\n# Shell\n#\n# You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`.\n# Entries in `shell.args` are passed unmodified as arguments to the shell.\n#\n# Default:\n#   - (macOS) /bin/bash --login\n#   - (Linux/BSD) user login shell\n#   - (Windows) powershell\n#shell:\n#  program: /bin/bash\n#  args:\n#    - --login\n\n# Startup directory\n#\n# Directory the shell is started in. If this is unset, or `None`, the working\n# directory of the parent process will be used.\n#working_directory: None\n\n# WinPTY backend (Windows only)\n#\n# Alacritty defaults to using the newer ConPTY backend if it is available,\n# since it resolves a lot of bugs and is quite a bit faster. If it is not\n# available, the the WinPTY backend will be used instead.\n#\n# Setting this option to `true` makes Alacritty use the legacy WinPTY backend,\n# even if the ConPTY backend is available.\n#winpty_backend: false\n\n# Send ESC (\\x1b) before characters when alt is pressed.\n#alt_send_esc: true\n\n#mouse:\n  # Click settings\n  #\n  # The `double_click` and `triple_click` settings control the time\n  # alacritty should wait for accepting multiple clicks as one double\n  # or triple click.\n  #double_click: { threshold: 300 }\n  #triple_click: { threshold: 300 }\n\n  # If this is `true`, the cursor is temporarily hidden when typing.\n  #hide_when_typing: false\n\n  #url:\n    # URL launcher\n    #\n    # This program is executed when clicking on a text which is recognized as a URL.\n    # The URL is always added to the command as the last parameter.\n    #\n    # When set to `None`, URL launching will be disabled completely.\n    #\n    # Default:\n    #   - (macOS) open\n    #   - (Linux/BSD) xdg-open\n    #   - (Windows) explorer\n    #launcher:\n    #  program: xdg-open\n    #  args: []\n\n    # URL modifiers\n    #\n    # These are the modifiers that need to be held down for opening URLs when clicking\n    # on them. The available modifiers are documented in the key binding section.\n    #modifiers: None\n\n# Mouse bindings\n#\n# Mouse bindings are specified as a list of objects, much like the key\n# bindings further below.\n#\n# To trigger mouse bindings when an application running within Alacritty captures the mouse, the\n# `Shift` modifier is automatically added as a requirement.\n#\n# Each mouse binding will specify a:\n#\n# - `mouse`:\n#\n#   - Middle\n#   - Left\n#   - Right\n#   - Numeric identifier such as `5`\n#\n# - `action` (see key bindings)\n#\n# And optionally:\n#\n# - `mods` (see key bindings)\n#mouse_bindings:\n#  - { mouse: Middle, action: PasteSelection }\n\n# Key bindings\n#\n# Key bindings are specified as a list of objects. For example, this is the\n# default paste binding:\n#\n# `- { key: V, mods: Control|Shift, action: Paste }`\n#\n# Each key binding will specify a:\n#\n# - `key`: Identifier of the key pressed\n#\n#    - A-Z\n#    - F1-F24\n#    - Key0-Key9\n#\n#    A full list with available key codes can be found here:\n#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants\n#\n#    Instead of using the name of the keys, the `key` field also supports using\n#    the scancode of the desired key. Scancodes have to be specified as a\n#    decimal number. This command will allow you to display the hex scancodes\n#    for certain keys:\n#\n#       `showkey --scancodes`.\n#\n# Then exactly one of:\n#\n# - `chars`: Send a byte sequence to the running application\n#\n#    The `chars` field writes the specified string to the terminal. This makes\n#    it possible to pass escape sequences. To find escape codes for bindings\n#    like `PageUp` (`\"\\x1b[5~\"`), you can run the command `showkey -a` outside\n#    of tmux. Note that applications use terminfo to map escape sequences back\n#    to keys. It is therefore required to update the terminfo when changing an\n#    escape sequence.\n#\n# - `action`: Execute a predefined action\n#\n#   - Copy\n#   - Paste\n#   - PasteSelection\n#   - IncreaseFontSize\n#   - DecreaseFontSize\n#   - ResetFontSize\n#   - ScrollPageUp\n#   - ScrollPageDown\n#   - ScrollLineUp\n#   - ScrollLineDown\n#   - ScrollToTop\n#   - ScrollToBottom\n#   - ClearHistory\n#   - Hide\n#   - Minimize\n#   - Quit\n#   - ToggleFullscreen\n#   - SpawnNewInstance\n#   - ClearLogNotice\n#   - ReceiveChar\n#   - None\n#\n#   (macOS only):\n#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space\n#\n# - `command`: Fork and execute a specified command plus arguments\n#\n#    The `command` field must be a map containing a `program` string and an\n#    `args` array of command line parameter strings. For example:\n#       `{ program: \"alacritty\", args: [\"-e\", \"vttest\"] }`\n#\n# And optionally:\n#\n# - `mods`: Key modifiers to filter binding actions\n#\n#    - Command\n#    - Control\n#    - Option\n#    - Super\n#    - Shift\n#    - Alt\n#\n#    Multiple `mods` can be combined using `|` like this:\n#       `mods: Control|Shift`.\n#    Whitespace and capitalization are relevant and must match the example.\n#\n# - `mode`: Indicate a binding for only specific terminal reported modes\n#\n#    This is mainly used to send applications the correct escape sequences\n#    when in different modes.\n#\n#    - AppCursor\n#    - AppKeypad\n#    - Alt\n#\n#    A `~` operator can be used before a mode to apply the binding whenever\n#    the mode is *not* active, e.g. `~Alt`.\n#\n# Bindings are always filled by default, but will be replaced when a new\n# binding with the same triggers is defined. To unset a default binding, it can\n# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for\n# a no-op if you do not wish to receive input characters for that binding.\n#\n# If the same trigger is assigned to multiple actions, all of them are executed\n# at once.\nkey_bindings:\n  # (Windows, Linux, and BSD only)\n  - { key: V,        mods: Control, action: Paste            }\n  #- { key: C,        mods: Control|Shift, action: Copy             }\n  #- { key: Insert,   mods: Shift,         action: PasteSelection   }\n  #- { key: Key0,     mods: Control,       action: ResetFontSize    }\n  #- { key: Equals,   mods: Control,       action: IncreaseFontSize }\n  #- { key: Add,      mods: Control,       action: IncreaseFontSize }\n  #- { key: Subtract, mods: Control,       action: DecreaseFontSize }\n  #- { key: Minus,    mods: Control,       action: DecreaseFontSize }\n\n  # (Windows only)\n  #- { key: Return,   mods: Alt,           action: ToggleFullscreen }\n\n  # (macOS only)\n  #- { key: Key0,   mods: Command,         action: ResetFontSize    }\n  #- { key: Equals, mods: Command,         action: IncreaseFontSize }\n  #- { key: Add,    mods: Command,         action: IncreaseFontSize }\n  #- { key: Minus,  mods: Command,         action: DecreaseFontSize }\n  #- { key: K,      mods: Command,         action: ClearHistory     }\n  #- { key: K,      mods: Command,         chars: \"\\x0c\"            }\n  #- { key: V,      mods: Command,         action: Paste            }\n  #- { key: C,      mods: Command,         action: Copy             }\n  #- { key: H,      mods: Command,         action: Hide             }\n  #- { key: M,      mods: Command,         action: Minimize         }\n  #- { key: Q,      mods: Command,         action: Quit             }\n  #- { key: W,      mods: Command,         action: Quit             }\n  #- { key: F,      mods: Command|Control, action: ToggleFullscreen }\n\n  #- { key: Paste,                    action: Paste                            }\n  #- { key: Copy,                     action: Copy                             }\n  #- { key: L,         mods: Control, action: ClearLogNotice                   }\n  #- { key: L,         mods: Control, chars: \"\\x0c\"                            }\n  #- { key: PageUp,    mods: Shift,   action: ScrollPageUp,   mode: ~Alt       }\n  #- { key: PageDown,  mods: Shift,   action: ScrollPageDown, mode: ~Alt       }\n  #- { key: Home,      mods: Shift,   action: ScrollToTop,    mode: ~Alt       }\n  #- { key: End,       mods: Shift,   action: ScrollToBottom, mode: ~Alt       }\n\n#debug:\n  # Display the time it takes to redraw each frame.\n  #render_timer: false\n\n  # Keep the log file after quitting Alacritty.\n  #persistent_logging: false\n\n  # Log level\n  #\n  # Values for `log_level`:\n  #   - None\n  #   - Error\n  #   - Warn\n  #   - Info\n  #   - Debug\n  #   - Trace\n  #log_level: Warn\n\n  # Print all received window events.\n  #print_events: false\n")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"tmuxrc"))),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{}),"# \u8bbe\u7f6eTmuxrc\ncd\ngit clone https://github.com/gpakosz/.tmux.git\nln -s -f .tmux/.tmux.conf\ncp .tmux/.tmux.conf.local .\n")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"\u6d4f\u89c8\u5668,",Object(a.b)("inlineCode",{parentName:"li"},"github proxy"))),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{}),"// \u542f\u52a8\u4ee3\u7406\uff1a chromium --http_proxy=http://127.0.0.1:10809\n\u276f git config user.name 'Bobo'\n\u276f git config user.email 'dongkaige@gmail.com'\n\nhttps://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt\n\n")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"zshrc"))),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{}),"# \u9996\u5148\u4e0b\u8f7d\u63d2\u4ef6\ngit clone <https://github.com/zsh-users/zsh-syntax-highlighting.git> ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\ngit clone <https://github.com/zsh-users/zsh-autosuggestions> ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n")),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{}),'# If you come from bash you might have to change your $PATH.\n# export PATH=$HOME/bin:/usr/local/bin:$PATH\n\n# Path to your oh-my-zsh installation.\nexport ZSH="/home/bobo/.oh-my-zsh"\n\n# Set name of the theme to load --- if set to "random", it will\n# load a random theme each time oh-my-zsh is loaded, in which case,\n# to know which specific one was loaded, run: echo $RANDOM_THEME\n# See <https://github.com/ohmyzsh/ohmyzsh/wiki/Themes>\n# ZSH_THEME="robbyrussell"\nfpath+=$HOME/.zsh/pure\nautoload -U promptinit; promptinit\nprompt pure\n\n# Set list of themes to pick from when loading at random\n# Setting this variable when ZSH_THEME=random will cause zsh to load\n# a theme from this variable instead of looking in $ZSH/themes/\n# If set to an empty array, this variable will have no effect.\n# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )\n\n# Uncomment the following line to use case-sensitive completion.\n# CASE_SENSITIVE="true"\n\n# Uncomment the following line to use hyphen-insensitive completion.\n# Case-sensitive completion must be off. _ and - will be interchangeable.\n# HYPHEN_INSENSITIVE="true"\n\n# Uncomment the following line to disable bi-weekly auto-update checks.\n# DISABLE_AUTO_UPDATE="true"\n\n# Uncomment the following line to automatically update without prompting.\n# DISABLE_UPDATE_PROMPT="true"\n\n# Uncomment the following line to change how often to auto-update (in days).\n# export UPDATE_ZSH_DAYS=13\n\n# Uncomment the following line if pasting URLs and other text is messed up.\n# DISABLE_MAGIC_FUNCTIONS=true\n\n# Uncomment the following line to disable colors in ls.\n# DISABLE_LS_COLORS="true"\n\n# Uncomment the following line to disable auto-setting terminal title.\n# DISABLE_AUTO_TITLE="true"\n\n# Uncomment the following line to enable command auto-correction.\n# ENABLE_CORRECTION="true"\n\n# Uncomment the following line to display red dots whilst waiting for completion.\n# COMPLETION_WAITING_DOTS="true"\n\n# Uncomment the following line if you want to disable marking untracked files\n# under VCS as dirty. This makes repository status check for large repositories\n# much, much faster.\n# DISABLE_UNTRACKED_FILES_DIRTY="true"\n\n# Uncomment the following line if you want to change the command execution time\n# stamp shown in the history command output.\n# You can set one of the optional three formats:\n# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"\n# or set a custom format using the strftime function format specifications,\n# see \'man strftime\' for details.\n# HIST_STAMPS="mm/dd/yyyy"\nHIST_STAMPS="yyyy-mm-dd"\n\n# Would you like to use another custom folder than $ZSH/custom?\n# ZSH_CUSTOM=/path/to/new-custom-folder\n\n# Which plugins would you like to load?\n# Standard plugins can be found in $ZSH/plugins/\n# Custom plugins may be added to $ZSH_CUSTOM/plugins/\n# Example format: plugins=(rails git textmate ruby lighthouse)\n# Add wisely, as too many plugins slow down shell startup.\nplugins=(extract git zsh-autosuggestions zsh-syntax-highlighting)\n\nsource $ZSH/oh-my-zsh.sh\n\n# User configuration\n\n# export MANPATH="/usr/local/man:$MANPATH"\n\n# You may need to manually set your language environment\n# export LANG=en_US.UTF-8\n\n# Preferred editor for local and remote sessions\n# if [[ -n $SSH_CONNECTION ]]; then\n#   export EDITOR=\'vim\'\n# else\n#   export EDITOR=\'mvim\'\n# fi\n\n# Compilation flags\n# export ARCHFLAGS="-arch x86_64"\n\n# Set personal aliases, overriding those provided by oh-my-zsh libs,\n# plugins, and themes. Aliases can be placed here, though oh-my-zsh\n# users are encouraged to define aliases within the ZSH_CUSTOM folder.\n# For a full list of active aliases, run `alias`.\n#\n# Example aliases\n# alias zshconfig="mate ~/.zshrc"\n# alias ohmyzsh="mate ~/.oh-my-zsh"\nalias emacs="emacs -nw"\nalias vim="emacs"\nalias ls="lsd"\nalias la="ls -lth"\n\nexport http_proxy=127.0.0.1:10809\nexport https_proxy=127.0.0.1:10809\n\n#rustlang\nexport RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static         # update toolchain\nexport RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup  # update rustup\nexport PATH=$PATH:$HOME/.cargo/bin\n\nexport WASM_BUILD_TYPE=release\n\n#pyenv\nexport PYENV_ROOT="$HOME/.pyenv"\n\n#GOlang\nexport GOPATH="$HOME/go"\nexport GO111MODULE=on\n#export GOPROXY=https://mirrors.aliyun.com/goproxy/\n\n# ibus engine libpinyin\n# screenfetch -A \'Arch Linux\' | lolcat\n\n#tmux\nsession="workspace"\ntmux has-session -t $session 2>/dev/null\nif [ $? != 0 ]; then\n  # Set up your session\n  export PATH="$HOME/.cargo/bin:$PYENV_ROOT/bin:$GOPATH/bin:/home/bobo:$PATH"\n\n  eval "$(pyenv init -)"\n  tmux new-session -s $session\nelse\n  tmux attach -t $session 2>/dev/null\nfi\n\ntypeset -U PATH\n\n')),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{}),'# zsh_back\n## Options section\nsetopt correct                                                  # Auto correct mistakes\nsetopt extendedglob                                             # Extended globbing. Allows using regular expressions with *\nsetopt nocaseglob                                               # Case insensitive globbing\nsetopt rcexpandparam                                            # Array expension with parameters\nsetopt nocheckjobs                                              # Don\'t warn about running processes when exiting\nsetopt numericglobsort                                          # Sort filenames numerically when it makes sense\nsetopt nobeep                                                   # No beep\nsetopt appendhistory                                            # Immediately append history instead of overwriting\nsetopt histignorealldups                                        # If a new command is a duplicate, remove the older one\nsetopt autocd                                                   # if only directory path is entered, cd there.\n\nzstyle \':completion:*\' matcher-list \'m:{a-zA-Z}={A-Za-z}\'       # Case insensitive tab completion\nzstyle \':completion:*\' list-colors "${(s.:.)LS_COLORS}"         # Colored completion (different colors for dirs/files/etc)\nzstyle \':completion:*\' rehash true                              # automatically find new executables in path \n# Speed up completions\nzstyle \':completion:*\' accept-exact \'*(N)\'\nzstyle \':completion:*\' use-cache on\nzstyle \':completion:*\' cache-path ~/.zsh/cache\nHISTFILE=~/.zhistory\nHISTSIZE=1000\nSAVEHIST=500\n#export EDITOR=/usr/bin/nano\n#export VISUAL=/usr/bin/nano\nWORDCHARS=${WORDCHARS//\\/[&.;]}                                 # Don\'t consider certain characters part of the word\n\n\n## Keybindings section\nbindkey -e\nbindkey \'^[[7~\' beginning-of-line                               # Home key\nbindkey \'^[[H\' beginning-of-line                                # Home key\nif [[ "${terminfo[khome]}" != "" ]]; then\n  bindkey "${terminfo[khome]}" beginning-of-line                # [Home] - Go to beginning of line\nfi\nbindkey \'^[[8~\' end-of-line                                     # End key\nbindkey \'^[[F\' end-of-line                                     # End key\nif [[ "${terminfo[kend]}" != "" ]]; then\n  bindkey "${terminfo[kend]}" end-of-line                       # [End] - Go to end of line\nfi\nbindkey \'^[[2~\' overwrite-mode                                  # Insert key\nbindkey \'^[[3~\' delete-char                                     # Delete key\nbindkey \'^[[C\'  forward-char                                    # Right key\nbindkey \'^[[D\'  backward-char                                   # Left key\nbindkey \'^[[5~\' history-beginning-search-backward               # Page up key\nbindkey \'^[[6~\' history-beginning-search-forward                # Page down key\n\n# Navigate words with ctrl+arrow keys\nbindkey \'^[Oc\' forward-word                                     #\nbindkey \'^[Od\' backward-word                                    #\nbindkey \'^[[1;5D\' backward-word                                 #\nbindkey \'^[[1;5C\' forward-word                                  #\nbindkey \'^H\' backward-kill-word                                 # delete previous word with ctrl+backspace\nbindkey \'^[[Z\' undo                                             # Shift+tab undo last action\n\n## Alias section \nalias cp="cp -i"                                                # Confirm before overwriting something\nalias df=\'df -h\'                                                # Human-readable sizes\nalias free=\'free -m\'                                            # Show sizes in MB\nalias gitu=\'git add . && git commit && git push\'\n\n# Theming section  \nautoload -U compinit colors zcalc\ncompinit -d\ncolors\n\n# enable substitution for prompt\nsetopt prompt_subst\n\n# Prompt (on left side) similar to default bash prompt, or redhat zsh prompt with colors\n #PROMPT="%(!.%{$fg[red]%}[%n@%m %1~]%{$reset_color%}# .%{$fg[green]%}[%n@%m %1~]%{$reset_color%}$ "\n# Maia prompt\nPROMPT="%B%{$fg[cyan]%}%(4~|%-1~/.../%2~|%~)%u%b >%{$fg[cyan]%}>%B%(?.%{$fg[cyan]%}.%{$fg[red]%})>%{$reset_color%}%b " # Print some system information when the shell is first started\n# Print a greeting message when shell is started\necho $USER@$HOST  $(uname -srm) $(lsb_release -rcs)\n## Prompt on right side:\n#  - shows status of git when in git repository (code adapted from https://techanic.net/2012/12/30/my_git_prompt_for_zsh.html)\n#  - shows exit status of previous command (if previous command finished with an error)\n#  - is invisible, if neither is the case\n\n# Modify the colors and symbols in these variables as desired.\nGIT_PROMPT_SYMBOL="%{$fg[blue]%}\xb1"                              # plus/minus     - clean repo\nGIT_PROMPT_PREFIX="%{$fg[green]%}[%{$reset_color%}"\nGIT_PROMPT_SUFFIX="%{$fg[green]%}]%{$reset_color%}"\nGIT_PROMPT_AHEAD="%{$fg[red]%}ANUM%{$reset_color%}"             # A"NUM"         - ahead by "NUM" commits\nGIT_PROMPT_BEHIND="%{$fg[cyan]%}BNUM%{$reset_color%}"           # B"NUM"         - behind by "NUM" commits\nGIT_PROMPT_MERGING="%{$fg_bold[magenta]%}\u26a1\ufe0e%{$reset_color%}"     # lightning bolt - merge conflict\nGIT_PROMPT_UNTRACKED="%{$fg_bold[red]%}\u25cf%{$reset_color%}"       # red circle     - untracked files\nGIT_PROMPT_MODIFIED="%{$fg_bold[yellow]%}\u25cf%{$reset_color%}"     # yellow circle  - tracked files modified\nGIT_PROMPT_STAGED="%{$fg_bold[green]%}\u25cf%{$reset_color%}"        # green circle   - staged changes present = ready for "git push"\n\nparse_git_branch() {\n  # Show Git branch/tag, or name-rev if on detached head\n  ( git symbolic-ref -q HEAD || git name-rev --name-only --no-undefined --always HEAD ) 2> /dev/null\n}\n\nparse_git_state() {\n  # Show different symbols as appropriate for various Git repository states\n  # Compose this value via multiple conditional appends.\n  local GIT_STATE=""\n  local NUM_AHEAD="$(git log --oneline @{u}.. 2> /dev/null | wc -l | tr -d \' \')"\n  if [ "$NUM_AHEAD" -gt 0 ]; then\n    GIT_STATE=$GIT_STATE${GIT_PROMPT_AHEAD//NUM/$NUM_AHEAD}\n  fi\n  local NUM_BEHIND="$(git log --oneline ..@{u} 2> /dev/null | wc -l | tr -d \' \')"\n  if [ "$NUM_BEHIND" -gt 0 ]; then\n    GIT_STATE=$GIT_STATE${GIT_PROMPT_BEHIND//NUM/$NUM_BEHIND}\n  fi\n  local GIT_DIR="$(git rev-parse --git-dir 2> /dev/null)"\n  if [ -n $GIT_DIR ] && test -r $GIT_DIR/MERGE_HEAD; then\n    GIT_STATE=$GIT_STATE$GIT_PROMPT_MERGING\n  fi\n  if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then\n    GIT_STATE=$GIT_STATE$GIT_PROMPT_UNTRACKED\n  fi\n  if ! git diff --quiet 2> /dev/null; then\n    GIT_STATE=$GIT_STATE$GIT_PROMPT_MODIFIED\n  fi\n  if ! git diff --cached --quiet 2> /dev/null; then\n    GIT_STATE=$GIT_STATE$GIT_PROMPT_STAGED\n  fi\n  if [[ -n $GIT_STATE ]]; then\n    echo "$GIT_PROMPT_PREFIX$GIT_STATE$GIT_PROMPT_SUFFIX"\n  fi\n}\n\ngit_prompt_string() {\n  local git_where="$(parse_git_branch)"\n  \n  # If inside a Git repository, print its branch and state\n  [ -n "$git_where" ] && echo "$GIT_PROMPT_SYMBOL$(parse_git_state)$GIT_PROMPT_PREFIX%{$fg[yellow]%}${git_where#(refs/heads/|tags/)}$GIT_PROMPT_SUFFIX"\n  \n  # If not inside the Git repo, print exit codes of last command (only if it failed)\n  [ ! -n "$git_where" ] && echo "%{$fg[red]%} %(?..[%?])"\n}\n\n# Right prompt with exit status of previous command if not successful\n #RPROMPT="%{$fg[red]%} %(?..[%?])" \n# Right prompt with exit status of previous command marked with \u2713 or \u2717\n #RPROMPT="%(?.%{$fg[green]%}\u2713 %{$reset_color%}.%{$fg[red]%}\u2717 %{$reset_color%})"\n\n\n# Color man pages\nexport LESS_TERMCAP_mb=$\'\\E[01;32m\'\nexport LESS_TERMCAP_md=$\'\\E[01;32m\'\nexport LESS_TERMCAP_me=$\'\\E[0m\'\nexport LESS_TERMCAP_se=$\'\\E[0m\'\nexport LESS_TERMCAP_so=$\'\\E[01;47;34m\'\nexport LESS_TERMCAP_ue=$\'\\E[0m\'\nexport LESS_TERMCAP_us=$\'\\E[01;36m\'\nexport LESS=-r\n\n\n## Plugins section: Enable fish style features\n# Use syntax highlighting\nsource /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\n# Use history substring search\nsource /usr/share/zsh/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh\n# bind UP and DOWN arrow keys to history substring search\nzmodload zsh/terminfo\nbindkey "$terminfo[kcuu1]" history-substring-search-up\nbindkey "$terminfo[kcud1]" history-substring-search-down\nbindkey \'^[[A\' history-substring-search-up          \nbindkey \'^[[B\' history-substring-search-down\n\n# Apply different settigns for different terminals\ncase $(basename "$(cat "/proc/$PPID/comm")") in\n  login)\n        RPROMPT="%{$fg[red]%} %(?..[%?])" \n        alias x=\'startx ~/.xinitrc\'      # Type name of desired desktop after x, xinitrc is configured for it\n    ;;\n#  \'tmux: server\')\n#        RPROMPT=\'$(git_prompt_string)\'\n#       ## Base16 Shell color themes.\n#       #possible themes: 3024, apathy, ashes, atelierdune, atelierforest, atelierhearth,\n#       #atelierseaside, bespin, brewer, chalk, codeschool, colors, default, eighties, \n#       #embers, flat, google, grayscale, greenscreen, harmonic16, isotope, londontube,\n#       #marrakesh, mocha, monokai, ocean, paraiso, pop (dark only), railscasts, shapesifter,\n#       #solarized, summerfruit, tomorrow, twilight\n#       #theme="eighties"\n#       #Possible variants: dark and light\n#       #shade="dark"\n#       #BASE16_SHELL="/usr/share/zsh/scripts/base16-shell/base16-$theme.$shade.sh"\n#       #[[ -s $BASE16_SHELL ]] && source $BASE16_SHELL\n#       # Use autosuggestion\n#       source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh\n#       ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20\n#       ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=\'fg=8\'\n#     ;;\n  *)\n        RPROMPT=\'$(git_prompt_string)\'\n        # Use autosuggestion\n        source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh\n        ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20\n        ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=\'fg=8\'\n    ;;\nesac\n\n')),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"i3+polybar"))),Object(a.b)("p",null,"TODO"),Object(a.b)("h2",{id:"\u8bbe\u7f6e\u5907\u4efd\u6587\u4ef6\u5939"},"\u8bbe\u7f6e\u5907\u4efd\u6587\u4ef6\u5939"),Object(a.b)("p",null,"\u9700\u8981\u5907\u4efd\u7684\u6587\u4ef6\uff1a"),Object(a.b)("ul",{className:"contains-task-list"},Object(a.b)("li",Object(o.a)({parentName:"ul"},{className:"task-list-item"}),Object(a.b)("input",Object(o.a)({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ","~/.ssh\u6587\u4ef6\u5939"),Object(a.b)("li",Object(o.a)({parentName:"ul"},{className:"task-list-item"}),Object(a.b)("input",Object(o.a)({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ","ibus-rime\u8bcd\u5e93"),Object(a.b)("li",Object(o.a)({parentName:"ul"},{className:"task-list-item"}),Object(a.b)("input",Object(o.a)({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ","alacritty.yaml"),Object(a.b)("li",Object(o.a)({parentName:"ul"},{className:"task-list-item"}),Object(a.b)("input",Object(o.a)({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ","zshrc"),Object(a.b)("li",Object(o.a)({parentName:"ul"},{className:"task-list-item"}),Object(a.b)("input",Object(o.a)({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ","~/bobo-blog")))}d.isMDXComponent=!0},133:function(e,n,t){"use strict";t.d(n,"a",(function(){return h})),t.d(n,"b",(function(){return f}));var o=t(0),i=t.n(o);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=i.a.createContext({}),d=function(e){var n=i.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},h=function(e){var n=d(e.components);return i.a.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},u=i.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=d(t),u=o,f=h["".concat(s,".").concat(u)]||h[u]||m[u]||a;return t?i.a.createElement(f,r(r({ref:n},c),{},{components:t})):i.a.createElement(f,r({ref:n},c))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=u;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r.mdxType="string"==typeof e?e:o,s[1]=r;for(var c=2;c<a;c++)s[c]=t[c];return i.a.createElement.apply(null,s)}return i.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);